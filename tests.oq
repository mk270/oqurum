
# Oqurum, a toy language
#
# Copyright (C) 2012  Martin Keegan
#
# This programme is free software; you may redistribute and/or modify
# it under the terms of the GNU Affero Public License v3.0

{ apply { lambda (x) { + x 1 } } 99 }

{ + 100 200 }

{ seq { + 2 3 } { + 10000 1 } }

{ apply { lambda (x) { seq { assign x { + x 1 } } { * x 2 } } } 11 } 

# fun f -> fun n -> if n == 0
#                   then 1
#                   else n * f (n-1)

{ lambda (f) { apply 
  { lambda (x) { apply x x } }
  { lambda (y) { apply f { apply 
		         { lambda (a) { apply y y } }
                 a } } } } }


{ lambda (f) { lambda (n) { if n { * n { apply f { - n 1 } } } 1 } } }

# fun f -> (fun x -> (fun a -> f (x x) a)) 
#          (fun x -> (fun a -> f (x x) a))

# calculates factorial(5):

{ apply
  { apply
    { lambda (f) { 
      apply
        { lambda (x) { lambda (a) { apply { apply f { apply x x } } a } } }
        { lambda (x) { lambda (a) { apply { apply f { apply x x } } a } } }
      } }
    { lambda (f) { lambda (n) { if n { * n { apply f { - n 1 } } } 1 } } }
  }		
  5 
}

{ apply { apply { lambda (a) { lambda (b) { + a b } } } 3 } 4 }

{ apply { apply { lambda (a, b) { - a b } } 10 } 2 }

{ apply { apply { apply { lambda (a, b, c) { - a { * b c } } } 10000 } 3 } 19 }

{ apply 
  { lambda (y) 
    { apply
      { lambda (x) { seq { assign x 12 } { + x y } } }
	  1000 }
  }
  3
}


{ apply 
  { lambda (y) 
    { apply
      { lambda (double) { seq 
	                         { assign double { lambda (x) { * x 2 } } }
                             { apply double y } 
                           } }
	  1000 }
  }
  3
}

{ defvar (double { lambda (x) { * x 2 } }) { apply double 4 } }

{ deffunc double (x) { * x 2 } { apply double 5 } }

{ deffunc multiply (x, y) { * x y } { apply multiply 7 11 } }

{ apply 
  { lambda (y)
    { apply  
      { lambda(x) { - 500 x } }
      y
    }
  }
  5 
}

{ apply { apply { apply 
    { lambda (x, y, z) { * z { - y x } } }
    5 } 300 } 2 }

{ apply
    { lambda (x, y, z) { * z { - y x } } }
	5 300 2 }


{ apply
  { apply
    { lambda (f) { 
      apply
        { lambda (x) { lambda (a) { apply { apply f { apply x x } } a } } }
        { lambda (x) { lambda (a) { apply { apply f { apply x x } } a } } }
      } }
    { lambda (f) { lambda (n) { if n { * n { apply f { - n 1 } } } 1 } } }
  }		
  5 
}

{ deffunc zcombinator(f) {
  apply
    { lambda(x) { lambda(a) { apply f { apply x x } a } } }
    { lambda(x) { lambda(a) { apply f { apply x x } a } } }
  }
  {
     deffunc fac(f) { lambda(n) { if n { * n { apply f { -n 1 } } } 1 } } {
      apply zcombinator fac 6 }
  }

}
